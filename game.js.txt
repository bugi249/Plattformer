// =================================================================
// SZENE 1: HAUPTMENÜ
// =================================================================
class MainMenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MainMenuScene' });
    }

    create() {
        this.add.text(400, 150, 'Mein Plattformer', { fontSize: '64px', fill: '#fff' }).setOrigin(0.5);

        // Spiel Starten Knopf
        const startButton = this.add.text(400, 300, 'Spiel Starten', { fontSize: '40px', fill: '#fff', backgroundColor: '#555', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive();
        
        startButton.on('pointerdown', () => {
            this.scene.start('GameScene'); // Startet die Spiel-Szene
        });

        // Steuerung Knopf
        const controlsButton = this.add.text(400, 400, 'Steuerung', { fontSize: '40px', fill: '#fff', backgroundColor: '#555', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive();

        controlsButton.on('pointerdown', () => {
            this.scene.start('ControlsScene'); // Startet die Steuerungs-Szene
        });

        // Hover-Effekt für die Knöpfe
        [startButton, controlsButton].forEach(button => {
            button.on('pointerover', () => button.setStyle({ fill: '#ff0' }));
            button.on('pointerout', () => button.setStyle({ fill: '#fff' }));
        });
    }
}

// =================================================================
// SZENE 2: STEUERUNGS-ANZEIGE
// =================================================================
class ControlsScene extends Phaser.Scene {
    constructor() {
        super({ key: 'ControlsScene' });
    }

    create() {
        this.add.text(400, 100, 'Steuerung', { fontSize: '64px', fill: '#fff' }).setOrigin(0.5);

        this.add.text(400, 250, 'Pfeiltasten Links / Rechts: Laufen', { fontSize: '32px', fill: '#fff' }).setOrigin(0.5);
        this.add.text(400, 320, 'Pfeiltaste Oben / Leertaste: Springen', { fontSize: '32px', fill: '#fff' }).setOrigin(0.5);

        // Zurück Knopf
        const backButton = this.add.text(400, 500, 'Zurück', { fontSize: '40px', fill: '#fff', backgroundColor: '#555', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive();
        
        backButton.on('pointerdown', () => {
            this.scene.start('MainMenuScene'); // Geht zurück zum Hauptmenü
        });

        // Hover-Effekt
        backButton.on('pointerover', () => backButton.setStyle({ fill: '#ff0' }));
        backButton.on('pointerout', () => backButton.setStyle({ fill: '#fff' }));
    }
}


// =================================================================
// SZENE 3: DAS SPIEL
// =================================================================
class GameScene extends Phaser.Scene {
    constructor() {
        super({ key: 'GameScene' });
    }

    // `preload` lädt die Assets für das Spiel
    preload() {
        this.load.image('background', 'assets/background.png');
        this.load.image('ground', 'assets/ground.png');
        this.load.image('obstacle', 'assets/obstacle.png');
        this.load.image('coin', 'assets/coin.png');
        this.load.spritesheet('player', 'assets/player_sheet.png', { frameWidth: 32, frameHeight: 48 });
    }

    // `create` baut das Spiel auf
    create() {
        this.gameOver = false;
        this.score = 0;

        this.physics.world.setBounds(0, 0, 1600, 600);
        this.add.image(0, 0, 'background').setOrigin(0, 0).setScale(2);

        const ground = this.physics.add.staticGroup();
        for (let i = 0; i < 5; i++) {
            ground.create(200 + (i * 400), 580, 'ground').setScale(2).refreshBody();
        }

        this.player = this.physics.add.sprite(100, 450, 'player');
        this.player.setBounce(0.1);
        this.player.setCollideWorldBounds(true);

        this.cameras.main.startFollow(this.player);
        this.cameras.main.setBounds(0, 0, 1600, 600);

        this.anims.create({ key: 'run', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 7 }), frameRate: 10, repeat: -1 });
        this.anims.create({ key: 'idle', frames: [{ key: 'player', frame: 4 }], frameRate: 20 });

        const obstacles = this.physics.add.group();
        const coins = this.physics.add.group();

        obstacles.create(500, 530, 'obstacle').setImmovable(true).body.setAllowGravity(false);
        obstacles.create(800, 530, 'obstacle').setImmovable(true).body.setAllowGravity(false);
        obstacles.create(850, 530, 'obstacle').setImmovable(true).body.setAllowGravity(false);
        
        coins.create(300, 450, 'coin').body.setAllowGravity(false);
        coins.create(350, 450, 'coin').body.setAllowGravity(false);
        coins.create(1100, 450, 'coin').body.setAllowGravity(false);
        
        this.physics.add.collider(this.player, ground);
        this.physics.add.overlap(this.player, obstacles, this.hitObstacle, null, this);
        this.physics.add.overlap(this.player, coins, this.collectCoin, null, this);

        this.cursors = this.input.keyboard.createCursorKeys();

        this.scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#FFF', fontStyle: 'bold', stroke: '#000', strokeThickness: 4 }).setScrollFactor(0);
    }

    // `update` ist die Spielschleife
    update() {
        if (this.gameOver) return;

        if (this.cursors.left.isDown) {
            this.player.setVelocityX(-300);
            this.player.setFlipX(true);
            this.player.anims.play('run', true);
        } else if (this.cursors.right.isDown) {
            this.player.setVelocityX(300);
            this.player.setFlipX(false);
            this.player.anims.play('run', true);
        } else {
            this.player.setVelocityX(0);
            this.player.anims.play('idle');
        }

        if ((this.cursors.up.isDown || this.cursors.space.isDown) && this.player.body.touching.down) {
            this.player.setVelocityY(-600);
        }
    }

    hitObstacle(player, obstacle) {
        this.physics.pause();
        player.setTint(0xff0000);
        this.gameOver = true;
        
        const gameOverText = this.add.text(400, 250, 'Game Over', { fontSize: '64px', fill: '#f00' }).setOrigin(0.5).setScrollFactor(0);
        const backToMenuText = this.add.text(400, 350, 'Zurück zum Menü', { fontSize: '32px', fill: '#fff', backgroundColor: '#555', padding: {x:10, y:5} }).setOrigin(0.5).setScrollFactor(0).setInteractive();

        backToMenuText.on('pointerdown', () => {
            this.scene.start('MainMenuScene');
        });
    }

    collectCoin(player, coin) {
        coin.destroy();
        this.score += 10;
        this.scoreText.setText('Score: ' + this.score);
    }
}


// =================================================================
// SPIEL-KONFIGURATION
// =================================================================
const config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    parent: 'game-container',
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 1200 },
            debug: false
        }
    },
    // Lädt alle Szenen und startet mit dem Hauptmenü
    scene: [MainMenuScene, ControlsScene, GameScene]
};

// Startet das Spiel
const game = new Phaser.Game(config);